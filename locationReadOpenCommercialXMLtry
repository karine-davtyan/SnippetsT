<?xml version="1.0" encoding="UTF-8"?>
<purity-config version="14.5.1.231204-6829-cc8f270d">
  
  <!-- 1) INPUT: read one or more location GIDs -->
  <step id="LocationInput"
        className="com.ataccama.dqc.tasks.io.text.read.TextFileReader"
        mode="NORMAL" disabled="false">
    <properties fileName="data/in/location_gids.csv"
                fieldSeparator=";"
                stringQualifier="&quot;"
                encoding="UTF-8"
                lineSeparator="\n"
                numberOfLinesInHeader="1">
      <columns>
        <textReaderColumn name="src_locationGid" type="STRING" ignore="false"/>
      </columns>
      <dataFormatParameters falseValue="false"
                             trueValue="true"
                             decimalSeparator="."
                             thousandsSeparator=""
                             dayFormat="yyyy-MM-dd"
                             dateTimeFormat="yyyy-MM-dd HH:mm:ss"
                             dateFormatLocale="en_US"/>
      <errorHandlingStrategy>
        <errorInstructions>
          <errorInstruction dataStrategy="STOP"
                            errorType="PROCESSING_ERROR"
                            putToLog="true" putToReject="false"/>
        </errorInstructions>
      </errorHandlingStrategy>
      <shadowColumns/>
    </properties>
    <visual-constraints layout="vertical" bounds="50,50,200,150"/>
  </step>

  <!-- 2) JSON CALL: execute GraphQL query per input row -->
  <step id="Json Call"
        className="com.ataccama.dqc.tasks.io.json.call.JsonCall"
        mode="NORMAL" disabled="false">
    <properties method="POST"
                url="https://teranet.prod.ataccama.online/graphql"
                encoding="UTF-8"
                templateBeginMark="#"
                templateEndMark="#">
      <headers>
        <header name="Content-Type"  value="application/json"/>
        <header name="Authorization" value="Bearer YWRtaW46TGFlZ2V2YWVHYWp1RDlpZXF1ZWljaG9vRG9uaWVwYTA="/>
      </headers>
      <inputTemplate>{
        "query":"query GetLocationCatalogItems($locationGid:GID!){location(gid:$locationGid){draftVersion{name catalogItems{edges{node{gid draftVersion{name} publishedVersion{description attributes{edges{node{draftVersion{name description}}}}}}}}}}}",
        "variables":{"locationGid":"#src_locationGid#"}
      }</inputTemplate>
      <reader>
        <dataStreams>
          <!-- flatten each catalogItems.edges[*] -->
          <rootJsonStreamConfig name="response"
                                path="$.data.location.draftVersion.catalogItems.edges"
                                minOneRecord="true"
                                maxOneRecord="false">
            <attributes>
              <attribute path="node.gid"                           name="item_gid"   type="STRING"/>
              <attribute path="node.draftVersion.name"            name="item_name"  type="STRING"/>
              <attribute path="node.publishedVersion.description" name="item_desc"  type="STRING"/>
            </attributes>
            <shadowColumns>
              <shadowColumnDef name="src_locationGid"
                               defaultExpression="in.src_locationGid"
                               type="STRING"/>
            </shadowColumns>
            <dataStreams/>
            <scorer>
              <scoringEntries/>
            </scorer>
          </rootJsonStreamConfig>
        </dataStreams>
      </reader>
      <scorer>
        <scoringEntries>
          <scoringEntry key="WLA_TARGET_UNREACHABLE" explain="true" score="0" explainAs="TARGET_UNREACHABLE"/>
          <scoringEntry key="WLA_TIMEOUT"            explain="true" score="0" explainAs="TIMEOUT"/>
          <scoringEntry key="WLA_RESPONSE_CODE"      explain="true" score="0" explainAs="INVALID_RESPONSE_CODE"/>
          <scoringEntry key="WLA_INVALID_JSON"       explain="true" score="0" explainAs="INVALID_JSON"/>
        </scoringEntries>
      </scorer>
    </properties>
    <visual-constraints layout="vertical" bounds="300,50,450,150"/>
  </step>

  <!-- wire the reader into the JSON Call -->
  <connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
    <source step="LocationInput" endpoint="out"/>
    <target step="Json Call"   endpoint="in"/>
    <visual-constraints><bendpoints/></visual-constraints>
  </connection>

  <!-- 3) OUTPUT: write flattened catalog items to CSV -->
  <step id="ResponseOutput"
        className="com.ataccama.dqc.tasks.io.text.write.TextFileWriter"
        mode="NORMAL" disabled="false">
    <properties writeHeader="true"
                fileName="data/out/catalog_items.csv"
                fieldSeparator=";"
                stringQualifier="&quot;"
                writeAllColumns="true"
                encoding="UTF-8"
                lineSeparator="\n"
                compression="NONE">
      <columns/>
      <dataFormatParameters falseValue="false"
                             trueValue="true"
                             decimalSeparator="."
                             thousandsSeparator=""
                             dayFormat="yyyy-MM-dd"
                             dateTimeFormat="yyyy-MM-dd HH:mm:ss"
                             dateFormatLocale="en_US"/>
    </properties>
    <visual-constraints layout="vertical" bounds="550,50,700,150"/>
  </step>

  <!-- wire the JSON Call response into the File Writer -->
  <connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
    <source step="Json Call" endpoint="response"/>
    <target step="ResponseOutput" endpoint="in"/>
    <visual-constraints><bendpoints/></visual-constraints>
  </connection>

</purity-config>

