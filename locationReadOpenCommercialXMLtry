<?xml version="1.0" encoding="UTF-8"?>
<purity-config version="14.5.1.231113-257-b7b25153">

  <!-- 1) INPUT: read a CSV with one column `locationGid` -->
  <step id="LocationInput" className="com.ataccama.dqc.tasks.io.text.read.TextFileReader">
    <properties
        fileName="data/in/location_gids.csv"
        fieldSeparator=";"
        stringQualifier="&quot;"
        encoding="UTF-8"
        lineSeparator="\n"
        numberOfLinesInHeader="1">
      <columns>
        <textReaderColumn name="src_locationGid" type="STRING" ignore="false"/>
      </columns>
    </properties>
    <visual-constraints layout="vertical" bounds="50,50,200,150"/>
  </step>

  <!-- 2) JSON CALL: send GraphQL query, injecting #src_locationGid# -->
  <step id="Json Call" className="com.ataccama.dqc.tasks.io.json.call.JsonCall">
    <properties
        method="POST"
        url="https://your.graphql.server/graphql"
        encoding="UTF-8"
        templateBeginMark="#"
        templateEndMark="#">

      <headers>
        <header name="Content-Type" value="application/json"/>
        <header name="Authorization" value="Bearer YOUR_TOKEN"/>
      </headers>

      <inputTemplate>{
        "query":"query GetLocationCatalogItems($locationGid:GID!){location(gid:$locationGid){draftVersion{name catalogItems{edges{node{gid draftVersion{name} publishedVersion{description attributes{edges{node{draftVersion{name description}}}}}}}}}}}",
        "variables":{"locationGid":"#src_locationGid#"}
      }</inputTemplate>

      <reader>
        <dataStreams>
          <rootJsonStreamConfig
              path="$.data.location.draftVersion.catalogItems.edges[*].node"
              name="response"
              minOneRecord="false">

            <!-- map the fields you need -->
            <attributes>
              <attribute path="gid"                           name="item_gid"   type="STRING"/>
              <attribute path="draftVersion.name"            name="item_name"  type="STRING"/>
              <attribute path="publishedVersion.description" name="item_desc"  type="STRING"/>
            </attributes>

            <!-- carry your input GID through for debugging -->
            <shadowColumns>
              <shadowColumnDef name="src_locationGid"
                               defaultExpression="in.src_locationGid"
                               type="STRING"/>
            </shadowColumns>

            <!-- if you also want attributes.edges[*], nest a child stream here -->
            <dataStreams/>
          </rootJsonStreamConfig>
        </dataStreams>
      </reader>
    </properties>
    <visual-constraints layout="vertical" bounds="300,50,450,150"/>
  </step>

  <connection>
    <source step="LocationInput" endpoint="out"/>
    <target step="Json Call"   endpoint="in"/>
    <visual-constraints>
      <bendpoints/>
    </visual-constraints>
  </connection>

  <!-- 3) OUTPUT: write the catalog-item rows to CSV -->
  <step id="ResponseOutput" className="com.ataccama.dqc.tasks.io.text.write.TextFileWriter">
    <properties
        fileName="data/out/catalog_items.csv"
        fieldSeparator=";"
        stringQualifier="&quot;"
        writeHeader="true"
        encoding="UTF-8"
        lineSeparator="\n">
      <columns/>
    </properties>
    <visual-constraints layout="vertical" bounds="550,50,700,150"/>
  </step>

  <connection>
    <source step="Json Call" endpoint="response"/>
    <target step="ResponseOutput" endpoint="in"/>
    <visual-constraints>
      <bendpoints/>
    </visual-constraints>
  </connection>

</purity-config>
